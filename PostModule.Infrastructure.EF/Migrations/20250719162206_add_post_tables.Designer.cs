// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PostModule.Infrastructure.Context;

#nullable disable

namespace PostModule.Infrastructure.Migrations
{
    [DbContext(typeof(PostModuleContext))]
    [Migration("20250719162206_add_post_tables")]
    partial class add_post_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PostModule.Domain.CityEntity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Citites", (string)null);
                });

            modelBuilder.Entity("PostModule.Domain.PostEntity.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("PostModule.Domain.PostEntity.Entity.PostPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostPrices", (string)null);
                });

            modelBuilder.Entity("PostModule.Domain.StateEntity.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CloseStates")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("PostModule.Domain.CityEntity.City", b =>
                {
                    b.HasOne("PostModule.Domain.StateEntity.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("PostModule.Domain.PostEntity.Entity.PostPrice", b =>
                {
                    b.HasOne("PostModule.Domain.PostEntity.Entity.Post", null)
                        .WithMany("PostPrices")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PostModule.Domain.PostEntity.ValueObjects.PriceDetails", "PriceDetails", b1 =>
                        {
                            b1.Property<int>("PostPriceId")
                                .HasColumnType("int");

                            b1.Property<int>("City")
                                .HasColumnType("int")
                                .HasColumnName("Price_City");

                            b1.Property<int>("InsideState")
                                .HasColumnType("int")
                                .HasColumnName("Price_InsideState");

                            b1.Property<int>("StateCenter")
                                .HasColumnType("int")
                                .HasColumnName("Price_StateCenter");

                            b1.Property<int>("StateClose")
                                .HasColumnType("int")
                                .HasColumnName("Price_StateClose");

                            b1.Property<int>("StateNonClose")
                                .HasColumnType("int")
                                .HasColumnName("Price_StateNonClose");

                            b1.Property<int>("Tehran")
                                .HasColumnType("int")
                                .HasColumnName("Price_Tehran");

                            b1.HasKey("PostPriceId");

                            b1.ToTable("PostPrices");

                            b1.WithOwner()
                                .HasForeignKey("PostPriceId");
                        });

                    b.OwnsOne("PostModule.Domain.PostEntity.ValueObjects.WeightRange", "WeightRange", b1 =>
                        {
                            b1.Property<int>("PostPriceId")
                                .HasColumnType("int");

                            b1.Property<int>("End")
                                .HasColumnType("int")
                                .HasColumnName("WeightEnd");

                            b1.Property<int>("Start")
                                .HasColumnType("int")
                                .HasColumnName("WeightStart");

                            b1.HasKey("PostPriceId");

                            b1.ToTable("PostPrices");

                            b1.WithOwner()
                                .HasForeignKey("PostPriceId");
                        });

                    b.Navigation("PriceDetails")
                        .IsRequired();

                    b.Navigation("WeightRange")
                        .IsRequired();
                });

            modelBuilder.Entity("PostModule.Domain.PostEntity.Entity.Post", b =>
                {
                    b.Navigation("PostPrices");
                });

            modelBuilder.Entity("PostModule.Domain.StateEntity.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
